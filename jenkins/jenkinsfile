pipeline {
    agent any
    stages {
        stage ("Sonar"){
          agent {
            docker{
              image 'maven:latest'
              args '-v $HOME/.m2:/root/.m2'
            }
          }
          stages{
            stage ("Sonar"){
              steps{
                script{
                  withCredentials([string(credentialsId: 'sonarLogin', variable: 'SONAR_LOGIN'), string(credentialsId: 'sonarPassword', variable: 'SONAR_PASSWORD')]){
                  mvn sonar:sonar \
                  -D sonar.projectKey=Home \
                  -D sonar.host.url=http://localhost:9000 \
                  -D sonar.login=${SONAR_LOGIN} \
                  -D sonar.password=${SONAR_PASSWORD}
                  }
                  timeout(time: 1, unit: 'HOURS'){
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK'){
                      error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
                  }
                  sh 'mvn clean install'
                }
              }
            }
          }
        }
    }
    post {
       always {
          withCredentials([string(credentialsId: 'telegramToken', variable: 'TOKEN'), string(credentialsId: 'telegramChatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : ${currentBuild.currentResult}'
          """)
          }
       }
    }
}
